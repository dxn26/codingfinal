import matplotlib.pyplot as plt
from datetime import datetime
import pandas as pd
import yfinance as yf
class RSI():
    def __init__(self, stock_ticker, start, end, hi, lo):
        self.hi = hi
        self.lo = lo
        self.ticker = stock_ticker
        self.start = start
        self.end = end
        self.signals = {}

    def calculate_signals(self, mva_days):
        startdate = datetime(*self.start)
        enddate = datetime(*self.end)
        data = yf.download(self.ticker, start=startdate, end=enddate)
        delta = data["Adj Close"].diff(1)
        delta.dropna(inplace=True)
        positive = delta.copy()
        negative = delta.copy()
        positive[positive < 0] = 0
        negative[negative > 0] = 0
        average_gain = positive.rolling(window=mva_days).mean()
        average_loss = abs(negative.rolling(window=mva_days).mean())
        relative_strength = average_gain / average_loss
        rsi = 100.0 - (100.0 / (1.0 + relative_strength))
        combined = pd.DataFrame()
        combined["Adj Close"] = data["Adj Close"]
        combined["rsi"] = rsi

        # Determine signals
        for index, row in combined.iterrows():
            if row["rsi"] > self.hi:
                self.signals[index] = 'SELL'
            elif row["rsi"] < self.lo:
                self.signals[index] = 'BUY'
            else:
                self.signals[index] = 'HOLD'
        for key in self.signals:
            print(key, self.signals[key])

    def plot_signals(self, combined):
        plt.figure(figsize=(12, 8))
        plt.subplot(211)
        plt.plot(combined.index, combined["Adj Close"], color="lightgray")
        plt.title("Adjusted Close Price")
        plt.grid(True, color="#555555")
        plt.gca().set_axisbelow(True)
        plt.gca().set_facecolor("black")
        plt.gcf().set_facecolor("#121212")
        plt.gca().tick_params(axis="x", colors="white")
        plt.gca().tick_params(axis="y", colors="white")

        plt.subplot(212)
        plt.plot(combined.index, combined["rsi"], color="lightgray")
        plt.axhline(0, linestyle="--", alpha=0.5, color="#ff0000")
        plt.axhline(10, linestyle="--", alpha=0.5, color="#ffaa00")
        plt.axhline(20, linestyle="--", alpha=0.5, color="#00ff00")
        plt.axhline(30, linestyle="--", alpha=0.5, color="#cccccc")
        plt.axhline(70, linestyle="--", alpha=0.5, color="#cccccc")
        plt.axhline(80, linestyle="--", alpha=0.5, color="#00ff00")
        plt.axhline(90, linestyle="--", alpha=0.5, color="#ffaa00")
        plt.axhline(100, linestyle="--", alpha=0.5, color="#ff0000")
        plt.title("RSI Value")
        plt.grid(False)
        plt.gca().set_axisbelow(True)
        plt.gca().set_facecolor("black")
        plt.gca().tick_params(axis="x", colors="white")
        plt.gca().tick_params(axis="y", colors="white")

        plt.show()

    def get_signals(self, when):
        when_date = datetime(*when)
        if when_date in self.signals:
            return f"At {when_date}, you should {self.signals[when_date]}"
        else:
            return f"No signal available for {when_date}. Market closed that day."


# Example usage
test = RSI("AAPL", (2022, 1, 1), (2024, 1, 31), 70, 30)
test.calculate_signals(14)
print(test.get_signals((2023, 11, 22)))
